;; Fonctions de test.

(defun test-projet (mv val code aff)
  (load-machine mv (compilation code))
  (if (eql val (run-machine mv))
      (format t "OK : ~S : ~S = ~D~%" aff code val)
    (format t "KO : ~S : ~S <> ~D~%" aff code val)
    )
  )

(defun test-projet-fun (mv val code fun aff)
  (load-machine mv (compilation fun))
  (load-machine mv (compilation code))
  (format t "F  : ~S~%" fun)
  (if (eql val (time (run-machine mv)))
      (format t "OK : ~S : ~S = ~D~%~%" aff code val)
    (format t "KO : ~S : ~S <> ~D~%~% ~S" aff code val (run-machine mv))
    )
  )

(defun test-projet-cond (mv val code aff)
  (load-machine mv (compilation code))
  (run-machine mv)
  (if (or (and val (get-reg mv :R0)) (and (not val) (not (get-reg mv :R0))))
      (format t "OK : ~S : ~S = ~D~%" aff code val)
    (format t "KO : ~S : ~S <> ~D~%" aff code val)
    )
  )

(defun test-projet-double (mv val code bis aff)
  (load-machine mv (compilation bis))
  (load-machine mv (compilation code))
  (format t "OH  : ~S~%" bis)
  (if (eql val (run-machine mv))
      (format t "OK : ~S : ~S = ~D~%" aff code val)
    (format t "KO : ~S : ~S <> ~D~%" aff code val)
    )
  )