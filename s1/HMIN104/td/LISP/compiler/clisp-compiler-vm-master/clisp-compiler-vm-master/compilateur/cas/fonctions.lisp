;; Compilation de fonctions.

(defun compilation-defun (exp env fenv nomf)
  (let ((nivem (assoc nomf fenv)))
    (append '((FENTRY))
	    `((@ ,(car exp)))
	    (compilation-progn (cddr exp)
			       (param-env (cadr exp) env 1 (if nivem (+ 1 (cadr nivem)) 0)) 
			       (fun-env (list exp) fenv (if nivem (+ 1 (cadr nivem)) 0)) 
			       (car exp))
	    '((RTN))
	    '((FEXIT)))
    )
  )

(defun param-env (exp env dep nivem)   
  (if (atom exp) 
      env
    (param-env (cdr exp) (cons (cons (car exp) `(LOC ,(- 0 dep) ,nivem)) env) (+ 1 dep) nivem)
    )
  )

(defun fun-env (exp fenv nivem)
  (if (atom exp) 
      fenv
    (fun-env (cdr exp) (cons `(,(caar exp) ,nivem) fenv) nivem)
    )
  )

(defun compilation-appel (exp env fenv nomf)
  (let ((n (length (cdr exp))) 
	(nivem (assoc (car exp) fenv)))
    (append (compilation-param (cdr exp) env fenv nomf)
	    `((PUSH (:DIESE ,n)))
	    `((MOVE :FP :R1))
	    `((MOVE :SP :FP))
	    `((MOVE :SP :R2))
	    `((SUB  (:DIESE ,n) :R2))
	    `((SUB  (:DIESE 1) :R2))
	    `((PUSH :R2)) 
	    `((PUSH :R1))
	    (if nivem  `((PUSH (:DIESE ,(cadr nivem))))  `((PUSH (:DIESE ,0))))
	    `((JSR (@ ,(car exp)))))
    )
  )

(defun compilation-param (exp env fenv nomf)
  (if (atom exp) 
      ()
    (append (compilation (car exp) env fenv nomf)
	    `((PUSH :R0))
	    (compilation-param (cdr exp) env fenv nomf))
    )
  )

(defun compilation-lambda (exp env fenv nomf)
  (let ((lambdaexpr (gensym "lambdaexpr"))
	(n (length (cdr exp)))
	(nivem (assoc nomf fenv)))
    (append (compilation-param (cdr exp) env fenv nomf)
	    `((PUSH (:DIESE ,n)))
	    `((MOVE :FP :R1))
	    `((MOVE :SP :FP))
	    `((MOVE :SP :R2))
	    `((SUB  (:DIESE ,n) :R2))	
	    `((SUB  (:DIESE 1) :R2))
	    `((PUSH :R2))
	    `((PUSH :R1))
	    (if nivem  `((PUSH (:DIESE ,(+ 1 (cadr nivem)))))  `((PUSH (:DIESE ,0))))
	    `((PUSH (:DIESE 0)))
	    (compilation (caddar exp)
			 (param-env (cadar exp) env 1 (if nivem   (+ 1 (cadr nivem)) 0)) 
			 (fun-env  (list (cons lambdaexpr (cdar exp))) fenv (if nivem (+ 1 (cadr nivem)) 0))
			 lambdaexpr)
	    `((MOVE ( 1 :FP) :SP))
	    `((MOVE ( 2 :FP) :FP)))
    )
  )