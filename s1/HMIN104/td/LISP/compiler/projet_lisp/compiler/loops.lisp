;; ---------------------------------------------------
;;|                      LOOPS                        |
;; ---------------------------------------------------
(defun compile-progn (exp env fenv namef)
  (if (null exp) 
		()
    (append (compiler (car exp) env fenv namef) (compile-progn (cdr exp) env fenv namef))
	)
)

(defun compile-loop (exp env fenv namef)
  (case (car exp)
		('while (compile-while (cdr exp) env fenv namef))
    ('until (compile-until (cdr exp) env fenv namef))
	)
)

;; --- While
(defun compile-while (exp env fenv namef)
  (let ((fin (gensym "finwhile"))
	(loop (gensym "while"))) 
    (if (eql (cadr exp) 'do) 
			(append `((@ ,loop))
				(compiler (car exp) env fenv namef) 
				`((CMP :R0 (:DIESE nil)))
				`((JEQ (@ ,fin)))
				(compiler (caddr exp) env fenv namef)
				`((JMP (@ ,loop)))
				`((@, fin))
			)
			(error "Syntax error: ~s" exp)
		)
	)
)

;; --- For
(defun compile-until (exp env fenv namef)  
  (let ((finuntil (gensym "FINUNTIL"))
	(loop (gensym "UNTIL")))
    (append `((@ ,loop))
	    (compiler (car exp) env fenv namef)
	    '((CMP :R0 (:DIESE T)))
	    `((JEQ (@ ,finuntil)))
	    (compiler (caddr exp) env fenv namef)
	    `((JMP (@ ,loop)))
	    `((@ ,fin))
		)
	)
)